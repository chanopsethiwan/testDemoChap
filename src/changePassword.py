# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/changePassword.ipynb (unless otherwise specified).

__all__ = ['ChangePasswordInput', 'H', 'changePassword']

# Cell
from .userTable import UserTable
from awsSchema.apigateway import Response, Event
from copy import deepcopy
from .saltHashPassword import hash_password, check_password
from dataclasses import dataclass
from dataclasses_json import dataclass_json
from beartype import beartype

# Cell
@dataclass_json
@dataclass
class ChangePasswordInput:
    #change to username
    # userId: str
    username: str
    oldPassword: str
    newPassword: str
    newPasswordRepeated: str

    @property
    def passwordHash(self):
        return hash_password(self.newPassword)

    def checkPassword(self):
        for item in UserTable.username_index.query(self.username):
            return check_password(item.passwordHash, self.oldPassword)


# Cell
class H:
    class ParseInputError(Exception): pass
    class PasswordCheckError(Exception): pass
    class InvalidPasswordError(Exception): pass
    class IncorrectRepeatedPasswordError(Exception): pass
    class HashPasswordError(Exception): pass
    class ChangePasswordError(Exception): pass

    @classmethod
    @beartype
    def parseInput(cls, event: dict)->ChangePasswordInput:
        try:
            user = Event.parseDataClass(ChangePasswordInput, deepcopy(event))
            return user
        except Exception as e:
            raise cls.ParseInputError(e)

    @classmethod
    @beartype
    def changeToNewPassword(cls, user: ChangePasswordInput):
        try:
            passwordChecked = user.checkPassword()
        except Exception as e:
            raise cls.PasswordCheckError(e)
        if passwordChecked:
            pass
        else:
            raise cls.InvalidPasswordError
        if user.newPassword == user.newPasswordRepeated:
            pass
        else:
            raise cls.IncorrectRepeatedPasswordError()
        try:
            newPasswordHashed = hash_password(user.newPassword)
        except Exception as e:
            raise cls.HashPasswordError(e)
        try:
            oldItem = UserTable.get(user.userId)
            oldItem.passwordHash = newPasswordHashed
            oldItem.save()
        except Exception as e:
            raise cls.ChangePasswordError(e)
        return True

# Cell
def changePassword(event, *args):
    try:
        user = H.parseInput(event)
        H.changeToNewPassword(user)
        return Response.returnSuccess()
    except H.ParseInputError as e:
        return Response.returnError(f'failed to parse input {e}')
    except H.PasswordCheckError as e:
        return Response.returnError(f'failed to check password {e}')
    except H.InvalidPasswordError as e:
        return Response.returnError(f'incorrect old password inputted {e}')
    except H.IncorrectRepeatedPasswordError as e:
        return Response.returnError(f'new password does not match repeated new password {e}')
    except H.HashPasswordError as e:
        return Response.returnError(f'failed to hash password {e}')
    except H.ChangePasswordError as e:
        return Response.returnError(f'unable to change password successfully {e}')
    except Exception as e:
        return Response.returnError(f' unknown error {e}')