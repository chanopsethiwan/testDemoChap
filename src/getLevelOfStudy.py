# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/getLevelOfStudy.ipynb (unless otherwise specified).

__all__ = ['GetLevelOfStudyInput', 'H', 'getLevelOfStudy']

# Cell
from .userTable import UserTable
from awsSchema.apigateway import Response, Event
from copy import deepcopy
from .saltHashPassword import hash_password, check_password
from dataclasses import dataclass
from dataclasses_json import dataclass_json
from beartype import beartype

# Cell
@dataclass_json
@dataclass
class GetLevelOfStudyInput:
    username: str


# Cell
class H:
    class ParseInputError: pass
    class UsernameQueryError: pass
    class LevelOfStudyError: pass

    @classmethod
    @beartype
    def parseInput(cls, event: dict)->GetLevelOfStudyInput:
        try:
            params = Event.parseQuery(event)
            user = GetLevelOfStudyInput.from_dict(params)
            return user
        except Exception as e:
            raise cls.ParseInputError(e)

    @classmethod
    @beartype
    def obtainLevelOfStudy(cls, user: GetLevelOfStudyInput):
        try:
            usernameQuery = UserTable.username_index.query(user.username)
        except Exception as e:
            raise cls.UsernameQueryError
        try:
            for i in usernameQuery:
                return i.levelOfStudy
        except:
            raise cls.LevelOfStudyError

# Cell
def getLevelOfStudy(event, *args):
    try:
        user = H.parseInput(event)
        levelOfStudy = H.obtainLevelOfStudy(user)
        return Response.returnSuccess(f'{levelOfStudy}')
    except H.ParseInputError as e:
        return Response.returnError(f'failed to parse input {e}')
    except H.UsernameQueryError as e:
        return Reponse.returnError(f'failed to query username {e}')
    except H.LevelOfStudyError as e:
        return Response.returnError(f'unable to query for level of study {e}')
    except Exception as e:
        return Response.returnError(f' unknown error {e}')
